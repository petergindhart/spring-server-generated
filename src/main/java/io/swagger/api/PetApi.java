/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Pet;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-02T16:44:07.114Z[GMT]")
@Api(value = "pet", description = "the pet API")
public interface PetApi {

    @ApiOperation(value = "list of all pets", nickname = "petGet", notes = "", response = Pet.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Pet.class, responseContainer = "List") })
    @RequestMapping(value = "/pet",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Pet>> petGet();


    @ApiOperation(value = "delete a pet", nickname = "petIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 404, message = "no pet with this id") })
    @RequestMapping(value = "/pet/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> petIdDelete(@ApiParam(value = "id of pet",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "a pet by id", nickname = "petIdGet", notes = "", response = Pet.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Pet.class),
        @ApiResponse(code = 404, message = "no pet with this id") })
    @RequestMapping(value = "/pet/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Pet> petIdGet(@ApiParam(value = "id of pet",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "update pet by id", nickname = "petIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet updated") })
    @RequestMapping(value = "/pet/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> petIdPut(@ApiParam(value = "id of pet",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody Pet body);


    @ApiOperation(value = "create a new pet", nickname = "petPost", notes = "", response = Integer.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "pet created", response = Integer.class),
        @ApiResponse(code = 404, message = "owner not found") })
    @RequestMapping(value = "/pet",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> petPost(@ApiParam(value = ""  )  @Valid @RequestBody Pet body);

}
