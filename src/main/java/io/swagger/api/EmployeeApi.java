/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Employee;
import io.swagger.model.Pet;
import io.swagger.model.Topic;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-02T16:44:07.114Z[GMT]")
@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    @ApiOperation(value = "list of all employees", nickname = "employeeGet", notes = "", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Employee.class, responseContainer = "List") })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Employee>> employeeGet();


    @ApiOperation(value = "reassign this employee to a new manager", nickname = "employeeIdChangeManagerPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 404, message = "employee or new manager not found") })
    @RequestMapping(value = "/employee/{id}/changeManager",
        method = RequestMethod.POST)
    ResponseEntity<Void> employeeIdChangeManagerPost(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id,@NotNull @ApiParam(value = "id of new manager", required = true) @Valid @RequestParam(value = "managerId", required = true) Integer managerId);


    @ApiOperation(value = "delete an employee", nickname = "employeeIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 400, message = "employee found but dependencies exist and no reassignId provided or no employee found with reassignId"),
        @ApiResponse(code = 404, message = "no employee with this id") })
    @RequestMapping(value = "/employee/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> employeeIdDelete(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id,@ApiParam(value = "id of employee to assign dependencies to (subordinates, pets)") @Valid @RequestParam(value = "reassignId", required = false) Integer reassignId);


    @ApiOperation(value = "list of employees that report to this employee", nickname = "employeeIdDirectReportsGet", notes = "", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Employee.class, responseContainer = "List") })
    @RequestMapping(value = "/employee/{id}/directReports",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Employee>> employeeIdDirectReportsGet(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "an employee by id", nickname = "employeeIdGet", notes = "", response = Employee.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Employee.class),
        @ApiResponse(code = 404, message = "no employee with this id") })
    @RequestMapping(value = "/employee/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Employee> employeeIdGet(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "remove an interest of this employee, if it exists", nickname = "employeeIdInterestsDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 404, message = "employee not found") })
    @RequestMapping(value = "/employee/{id}/interests",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> employeeIdInterestsDelete(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id,@NotNull @ApiParam(value = "id of topic", required = true) @Valid @RequestParam(value = "topId", required = true) Integer topId);


    @ApiOperation(value = "list of topics this employee is interested in", nickname = "employeeIdInterestsGet", notes = "", response = Topic.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Topic.class, responseContainer = "List") })
    @RequestMapping(value = "/employee/{id}/interests",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Topic>> employeeIdInterestsGet(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "add a new interest for this employee", nickname = "employeeIdInterestsPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success"),
        @ApiResponse(code = 404, message = "employee or topic not found") })
    @RequestMapping(value = "/employee/{id}/interests",
        method = RequestMethod.POST)
    ResponseEntity<Void> employeeIdInterestsPost(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id,@NotNull @ApiParam(value = "id of topic", required = true) @Valid @RequestParam(value = "topId", required = true) Integer topId);


    @ApiOperation(value = "list of pets owned by this employee", nickname = "employeeIdPetsGet", notes = "", response = Pet.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = Pet.class, responseContainer = "List") })
    @RequestMapping(value = "/employee/{id}/pets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Pet>> employeeIdPetsGet(@ApiParam(value = "id of employee",required=true) @PathVariable("id") Integer id);

}
